package com.zhangling.spring.boot.controller;

import com.alibaba.fastjson.JSON;
import com.zhangling.spring.boot.exception.ServerException;
import com.zhangling.spring.boot.model.ResponseModel;
import com.zhangling.spring.boot.model.db.UserDBModel;
import com.zhangling.spring.boot.model.rt.UserLoginRequestModel;
import com.zhangling.spring.boot.model.rt.UserRegisterRequestModel;
import com.zhangling.spring.boot.model.ui.ExceptionDescriptionModel;
import com.zhangling.spring.boot.model.ui.UserModel;
import com.zhangling.spring.boot.repository.UserRepository;
import com.zhangling.spring.boot.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

@RestController
@RequestMapping("user")
public class UserController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserService userService;

    @ResponseBody
    @PostMapping("register")
    public ResponseModel register(@Valid @RequestBody UserRegisterRequestModel userRegisterRequestModel){
        ResponseModel userModelResponseModel = new ResponseModel();
        try {
            UserDBModel userDBModel = JSON.parseObject(JSON.toJSONString(userRegisterRequestModel),UserDBModel.class);
            UserModel userModel = JSON.parseObject(JSON.toJSONString(userService.register(userDBModel)),UserModel.class);
            userModelResponseModel.setData(userModel);
            userModelResponseModel.setSuccess(true);
        }catch (ServerException e) {
            if (e.getExceptionDescriptionModel() != null){
                userModelResponseModel.setData(e.getExceptionDescriptionModel());
            }else {
                ExceptionDescriptionModel exceptionDescriptionModel = new ExceptionDescriptionModel();
                exceptionDescriptionModel.setMessage(e.getMessage());
                userModelResponseModel.setData(exceptionDescriptionModel);
            }
        }
        return  userModelResponseModel;
    }

    @ResponseBody
    @PostMapping("login")
    public ResponseModel login(@Valid @RequestBody UserLoginRequestModel userLoginRequestModel){
        ResponseModel userModelResponseModel = new ResponseModel();
        try {
            UserDBModel userDBModel = JSON.parseObject(JSON.toJSONString(userLoginRequestModel),UserDBModel.class);
            UserModel userModel = JSON.parseObject(JSON.toJSONString(userService.login(userDBModel)),UserModel.class);
            userModelResponseModel.setData(userModel);
            userModelResponseModel.setSuccess(true);
        }catch (ServerException e) {
            if (e.getExceptionDescriptionModel() != null){
                userModelResponseModel.setData(e.getExceptionDescriptionModel());
            }else {
                ExceptionDescriptionModel exceptionDescriptionModel = new ExceptionDescriptionModel();
                exceptionDescriptionModel.setMessage(e.getMessage());
                userModelResponseModel.setData(exceptionDescriptionModel);
            }
        }
        return  userModelResponseModel;
    }
}
